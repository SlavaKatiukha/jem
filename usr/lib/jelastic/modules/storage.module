#!/bin/bash

# Copyright 2015 Jelastic, Inc.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.



inherit os output vzexec virtuozzo;
include log;

DESCRIPTION="Manipulate storage mounts inside specified container";
VERSION="1"
DEFAULT_ACTION="Usage";

$PROGRAM "vzctl"
$PROGRAM "vzlist"
$PROGRAM "awk"
$PROGRAM "ifconfig"
$PROGRAM "rsync"
$PROGRAM "grep"
$PROGRAM "tar"

declare -i _CTID=""
declare -i CTID=""
declare -i _MOVEDATA=0
declare CLUSTER="false"
declare _SOURCE=""
declare _DESTINATION=""
declare _DEFAULT_NFS_MOUNT_OPTS="-fstype=nfs,nfsvers=3,nolock,udp,soft,timeo=120,retrans=20,_netdev"
declare CONTAINER_MOUNTS_STORAGE="/etc/autofs.jelastic"
declare _IPLIST
declare -a UNKNOWN_ARG
declare SAVE_CONFIG="true"

declare TRUE=0
declare FALSE=1

FORCE_UMOUNT=$TRUE
FORCE_MOUNT=$FALSE

MOUNTPROG="/usr/sbin/automount"
MOUNTPROG_APK="/sbin/mount.nfs"
MOUNTPACKAGE="/var/lib/jelastic/packages/jelastic-nfs-utils.tar.gz"
_UI_RESULT=0
USERID=0
GROUPID=0
VERBOSE=1
DEFAULT_AUTOFS_TIMEOUT=300
JELASTIC_AUTOFS_TIMEOUT=3

EXEC="/bin/bash -c "

function doUsage() {
    showUsageMessage
}

function onModLoadCallback() {
    log "Preload callback";

    ## TODO: remove "params" garbarge option
    local temp=`getopt -o c:,s:,d:,u:,g:,l:,m: -l ctid:,source:,destination:,ip:,uid:,gid:,movedata:,saveconfig:,force:,cluster: -- "$@" 2>/dev/null`;
    [[ $? != 0 ]] && die -q "Terminating...";
    eval set -- "$temp";

    while true ; do
        case "$1" in
            --force)
                shift;
                FORCE_UMOUNT=$TRUE
                FORCE_MOUNT=$TRUE
                shift;
                ;;
            --saveconfig)
                shift;
                SAVE_CONFIG=${1,,}
                shift;
                ;;
            -c | --ctid)
                shift;
                _CTID=$1
                CTID=$1
                EXEC="$VZCTL exec2 ${_CTID}"
                vzexecSetCTID ${_CTID}
                shift;
                ;;
            --cluster)
                shift;
                CLUSTER=$1
                if [ "x$CLUSTER" != "xtrue" ]; then
                    JELASTIC_AUTOFS_TIMEOUT="300"
                fi
                shift;
                ;;
            -s | --source)
                shift;
                _SOURCE=$1
                shift;
                ;;
            -d | --destination)
                shift;
                _DESTINATION=$1
                shift;
                ;;
            -l | --ip )
                shift;
                _IPLIST=$1;
                shift;
                ;;
            -m | --movedata)
                shift;
                _MOVEDATA=$1;
                shift;
                ;;
            -u | --uid)
                shift;
                USERID=$1;
                shift;
                ;;
            -g | --gid)
                shift;
                GROUPID=$1;
                shift;
                ;;
            --)
                shift;
                break;
                ;;
        esac;
    done;
    [ -n "$CTID" ] && { vzIsContainerExists $CTID || { writeJSONResponseErr "result=>4003" "message=>ctid $CTID not found"; die -q; }; }

    [ -n "$CTID" ] && {
        VZ_CTID_PRIVATE=$(vzlist -Ho private $CTID )
        VZ_CTID_ROOT=$(vzlist -Ho root $CTID )
        if vzexecRun "grep JELASTIC_CHECK_MOUNT= /.jelenv" ; then
            res=$(vzexecGetLastStdOut)
            [ -n "$res" ] && eval "$res"
        fi
    }

    for arg do UNKNOWN_ARG+=("$arg") ; done
    [[ ! -z "${CTID}" ]] && {
        MOUNTS_STORAGE="${VZ_CTID_ROOT}${CONTAINER_MOUNTS_STORAGE}"
    }
    log "${UNKNOWN_ARG[*]}"

    return 0
}

function _hasActiveMounts() {
    #-hosts is /net/host
    #dir:path -> /path/*
    _cmd='[ -f /etc/auto.master ] && sed -re "/^#/d" -e "s/dir:(.*)/+ \1\/*/g" -e "/\s/!d" -e "s/.+\s(.*)/\1/g" -e "s/-hosts/\/net\/host/g" /etc/auto.master'
    vzexecRun "$_cmd"
    autoFSMaps=($(vzexecGetLastStdOut))
    if [ -n "$autoFSMaps" ] ; then
        for f in ${autoFSMaps[*]} ; do
            #skipping also cdrom. it is not available in jelastic vzcontainers
            vzexecRun "[ -f \"$f\" ] && sed -re '/^#/d' -e '/^$/d' -e '/\/dev\/cdrom/d' $f"
            [ -n "$(vzexecGetLastStdOut)" ] && return 0
        done
    fi
    return 1
}

function _reloadAutoFS() {
    local _cmd="systemctl reload autofs || service autofs reload"
    vzexecRun "$_cmd" && return 0

    _cmd="pgrep automount >/dev/null && kill -s SIGHUP $(pidof -s automount)"
    vzexecRun "$_cmd"
    return $?
}

function _restartAutoFS() {
    local _cmd="systemctl restart autofs || service autofs restart"
    vzexecRun "$_cmd"
    return $?
}

function _isVirtuozzoInstalled() {
    local vzmainconfig="/etc/sysconfig/vz";
    if [ -f "${vzmainconfig}" ] ; then
        $GREP -qE "VIRTUOZZO=[\s|\"|']*yes[\s|\"|']*" /etc/sysconfig/vz ; return $?;
    fi
    return 1
}

function getTargetIPs() {
    local lctid=$1
    if [ -z ${lctid} ] ; then
        $IFCONFIG | $AWK '/inet addr/{print substr($2,6)}'
    else
        $AWK '/[ \t]*'${lctid}'/{$1=$2=$3="";gsub(/^[ \t]+/,"",$0);print $0}' /proc/vz/veinfo
    fi
}

function preparePath() {
    local tpath=${1:?"Path required"}
    local hn=${2}
    if [[ ! -z "${hn}" ]] ; then
        tpath="${VZ_CTID_ROOT}${tpath}"
        tpath=$($SED -re 's/\$/\\$/g' -e 's/(`)/\\\1/g' <<< "${tpath}")
    fi

    local cmd="[[ -d '$($SED -re "s/'/\\\'\'/g" <<< "${tpath}")' ]] || { mkdir -p \"$($SED -re 's/"/\\\"/g' <<< "${tpath}")\" 2>/dev/null && chmod 0777 \"$($SED -re 's/"/\\\"/g' <<< "${tpath}")\";}";
    if [[ -z "${hn}" ]] ; then
        log "${cmd}"
        vzexecRun "${cmd}"
        return $(vzexecGetLastErrCode)
    fi
    log "${cmd}"
    /bin/bash -c "$cmd"
    return $?;
}

function remountPath() {
    local share=${1}
    local remountCmd="umount -l ${share} ; mount ${share}"
    out=$($EXEC "$remountCmd" 2>&1)
    if [[ -z "${out}" ]] ; then
       log "$out"
    fi
    return $?
}

function migrateConfig() {
    $SED -nre '/nfs(3|4)?/p' "$VZ_CTID_ROOT/etc/fstab" | awk "{print \$2\" ${_DEFAULT_NFS_MOUNT_OPTS},uid=${USERID},gid=${GROUPID} \"\$1}" >> "${MOUNTS_STORAGE}"
    $SED -i -re '/nfs(3|4)?/d' "$VZ_CTID_ROOT/etc/fstab"
}

function checkMount() {
    #skip check if CTID is empty
    [[ -z "${CTID}" ]] && return 0

    if [ -z "$JELASTIC_CHECK_MOUNT" ]; then
        if ! vzexecRun "rpcinfo -p $1 | grep -q mountd" ; then
            log "mountd procedures not found on RPC server. Checking remote share will be disabled"
            JELASTIC_CHECK_MOUNT=0
        fi
        JELASTIC_CHECK_MOUNT=1
    fi

    case "$JELASTIC_CHECK_MOUNT" in
       false|0)
            log "remote server checking disabled for CTID $CTID"
            return 0
            ;;
        true|1)
            log "remote server checking enabled for CTID $CTID"
            ;;
    esac

    retries=5
    cmdShowmount='showmount -e '$1' | grep "'$2'"'

    localCIPs=($(getTargetIPs $CTID))

    while [[ $retries -gt 0 ]] ; do
        #get IPs from remote storage
        vzexecRun $cmdShowmount
        sharedIPs=($(awk '{split($2,a,",") ; if (a[1] != $0) { for (k in a) { if (a[k] != "") { print a[k] } } } else {print $2}}' <<< "$(vzexecGetLastStdOut)"))

        #is local IP in remote network range
        for lIP in ${localCIPs[@]} ; do
            for sIP in ${sharedIPs[@]} ; do
                [[ "x$sIP" == "x*" || "x$sIP" == "x(everyone)" ]] && return 0
                (( $(inSubnet $sIP $lIP) )) && return 0
            done
        done

        sleep 4
        retries=$((retries-1))
    done

    if [[ "$(vzexecGetLastErrCode)" -gt 0 ]]; then
        echo "`date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID: StdErr: $(vzexecGetLastStdErr) StdOut": $(vzexecGetLastStdOut) >> ${JEM_CALLS_LOG};
    fi

    echo "`date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID: timeout has elapsed" >> ${JEM_CALLS_LOG};
    return 1
}

function processnfs4() {
    _DEFAULT_NFS_MOUNT_OPTS="-fstype=nfs,nolock,soft,timeo=30,retrans=2,_netdev"
    processnfs $*
}

function processnfs3() {
    _DEFAULT_NFS_MOUNT_OPTS="-fstype=nfs,nfsvers=3,nolock,udp,soft,timeo=120,retrans=20,_netdev"
    processnfs $*
}

function processnfs() {
    local sourceIP=${1:?"Source address required"}
    local sourceMount=${2:?"Source share name required"}
    local sourceMountUnEsc=$($SED -re 's/\\(\/|\(|\)|\]|\[|\\)/\1/g' <<< "$sourceMount")
    local destinationEsc=$($SED -re 's/\s/\\\\040/g' <<< "${_DESTINATION}" )
    local running

    isContainerRunning ${CTID} ; running=$?
    if [[ $running -ne 0 ]] ; then
        echo "`date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID - container is not running." >> ${JEM_CALLS_LOG}
        $VZCTL mount $CTID > /dev/null 2>&1
    fi

    local issue_file="$(vzctPath $VZ_CTID_ROOT /etc/issue )"
    local release_files="$(vzctPath $VZ_CTID_ROOT /etc/)/*-release"
    issue_string=$(set +f; cat $release_files $issue_file 2>/dev/null);
    OS=$(detectOS "$issue_string")
    OS_ver=$(getOSVersion "$issue_string")
    OS_ver=${OS_ver%%.*}

    if [[ "x$OS" == "xalpine" ]] ; then
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : Alpine Linux detected. " >> ${JEM_CALLS_LOG}

        if vzexecRun "[[ ! -e \"$MOUNTPROG_APK\" ]]" ; then
            if ! dosetupUtils ${_CTID} ; then
                echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : Error installing utils $(gatherCTInfo) " >> ${JEM_CALLS_LOG}
                return 2
            fi
        fi

        [[ ! -z "${CTID}" ]] && {
            MOUNTS_STORAGE="$(vzctPath $VZ_CTID_ROOT /etc/fstab)"
        }

        _DEFAULT_NFS_MOUNT_OPTS="$($SED -re 's/-fstype=nfs,//g' <<< $_DEFAULT_NFS_MOUNT_OPTS)"
        mntEntry="${sourceIP}:$($SED -re 's/\\\$/$/g' <<< "${sourceMountUnEsc}")\t${destinationEsc}\tnfs\t${_DEFAULT_NFS_MOUNT_OPTS}\t0\t0"
        cmdRegisterMount="echo -e \"$mntEntry\" >> ${MOUNTS_STORAGE};"

    else
        if ! $GREP -q "$CONTAINER_MOUNTS_STORAGE" "$(vzctPath $VZ_CTID_ROOT /etc/auto.master)" 2>&1; then
            dosetupUtils ${_CTID} || return 2
        fi

        autofsdest="$($SED -e 's/\s/\\ /g' <<< $_DESTINATION)"
        mntEntry="$autofsdest ${_DEFAULT_NFS_MOUNT_OPTS},uid=${USERID},gid=${GROUPID} ${sourceIP}:$($SED -re 's/\\\$/$/g' <<< "${sourceMountUnEsc}")"
        cmdRegisterMount="echo -e \"$mntEntry\" >> ${MOUNTS_STORAGE}"
    fi

    if [[ $running -eq 0 ]] ; then
        if ! checkMount $sourceIP "$sourceMountUnEsc" ; then
            echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : Destination NFS server is not reachable. $(gatherCTInfo)" >> ${JEM_CALLS_LOG}
            echo "Destination NFS server is not reachable. Server IP: $(vzctl exec2 ${CTID} host ${sourceIP} 2>/dev/null), Client IP: $($AWK '/[ \t]*'${CTID}'/{$1=$2=$3="";gsub(/^[ \t]+/,"",$0);print $0}' /proc/vz/veinfo )"
            return 1
        fi
    fi

    if ! preparePath "${_DESTINATION}" "${_CTID}" ; then
        echo "Can not create path ${_DESTINATION}"
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : Can not create path ${_DESTINATION}. $(gatherCTInfo)" >> ${JEM_CALLS_LOG}
        return 1
    fi

    if [[ "x$SAVE_CONFIG" == "xtrue" ]] ; then
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : registering ${sourceIP}:${sourceMount} in ${_CTID}" >> ${JEM_CALLS_LOG}
        out=$(echo -e $mntEntry >> ${MOUNTS_STORAGE})
        if [[ ! -z "${out}" ]] ; then
            echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : $out" >> ${JEM_CALLS_LOG}
        fi
    fi

    msg=""
    res=0

    if [[ "x$OS" == "xalpine" ]] ; then
        if [[ $running -eq 0 ]] ; then
            mntcmd="mount \"$($SED -re 's/("\*|\$|\?|\|\^|`|'\'')/\\\1/g' <<< "${_DESTINATION}")\""
            vzexecRun "${mntcmd}"
            res="$(vzexecGetLastErrCode)"
            msg="$(vzexecGetLastStdErr)"
            if [[ $res -gt "0" ]] && [[ $FORCE_MOUNT -eq $FALSE ]] ; then
                local mntEntryCheck="${sourceIP}:$($SED -re 's/(\$|\[|\]|\*|\(|\)|\?|\||\^)/\\\1/g' -e 's/\\\\\$/$/g' <<< ${sourceMount})/? on $($SED -re 's/(\[|\]|\*|\(|\)|\$|\?|\||\^|`)/\\\1/g' <<< ${destinationEsc})"
                vzexecRun "mount | $GREP -P \"$mntEntryCheck\""
                res=$(vzexecGetLastErrCode)
                if [[ $res -ne $TRUE ]] ; then
                    #remove the /etc/fstab entry
                    cmdUnregisterMount="/$(echo -e $mntEntry | $SED -r -e 's/\t/\\\s+/g;' -e 's/\//\\\//g' -e 's/\./\\./g' -e 's/(\[|\]|\*|\(|\)|\$|\?|\||\^)/\\\1/g')/d"
                    if [[ "x$SAVE_CONFIG" == "xtrue" ]] ; then
                        out=$($SED -i -re "$cmdUnregisterMount" ${MOUNTS_STORAGE} 2>&1)
                    fi
                    log $out
                    msg="${msg}. Server IP is: $(host ${sourceIP}), RPC connection: $(timeout 1 bash -c "cat < /dev/null > /dev/tcp/${sourceIP}/111" 2>/dev/null; echo $?)"
                    echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : Error mounting share. $(gatherCTInfo)" >> ${JEM_CALLS_LOG}
                    res=4111
                else
                    res=0
                fi
            fi
        fi
        [[ -z "$msg" ]] && echo "successfuly mounted" || echo $msg
        [[ "$res" -gt 0 ]] && return 1;
    fi

    if [[ $running -eq 0 ]] ; then
        if _hasActiveMounts ; then
            vzexecRun "$_ENABLEAUTOFSCMD"
            if [[ "x$SAVE_CONFIG" == "xfalse" ]] ; then
                _restartAutoFS
            else
                _reloadAutoFS
            fi
        else
            vzexecRun "$_DISABLEAUTOFSCMD"
        fi
    else
        log "unmounting"
        $VZCTL umount $CTID > /dev/null 2>&1
    fi
    [[ -z "$msg" ]] && echo "successfuly mounted" || echo $msg
    [[ "$res" -gt 0 ]] && return 1;
    return 0
}

function processlocal() {
    CONTAINER_MOUNTS_STORAGE="/etc/fstab"
    log "source: $sourceMount destination: ${_DESTINATION} ctid: ${_CTID}"
    local mntEntry="${sourceMount}\t${_DESTINATION}\tnone\trw,bind\t0\t0"

    if [ -z "$_CTID" ] ; then
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : there is no CTID. Local mounts available only via hardnode call $(gatherCTInfo)" >> ${JEM_CALLS_LOG}
        echo "CTID required"
        return 1;
    fi

    isContainerRunning ${CTID} ; running=$?
    [[ $running -ne 0 ]] && {
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : Container $CTID is not running. Mounting" >> ${JEM_CALLS_LOG}
        $VZCTL mount $CTID > /dev/null 2>&1
    }

    OIFS=${IFS};IFS=$'\n'
    local aCurrentMounts=($($SED -nre "/none/{/bind/{s/\s*(\S+).*/\1/;p}}" "$(vzctPath $VZ_CTID_ROOT $CONTAINER_MOUNTS_STORAGE)"))
    IFS=${OIFS}

    log "${aCurrentMounts[@]}"

    if [[ ${#aCurrentMounts[@]} -gt 0 ]] ; then
        if indexOf "${aCurrentMounts[*]}" "${sourceMount}" >/dev/null; then
            echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : ${sourceMount} already mounted" >> ${JEM_CALLS_LOG}
            echo "already mounted"
            return 0;
        fi
    else
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : cannot get fstab entries" >> ${JEM_CALLS_LOG}
    fi

    if ! preparePath "${_DESTINATION}" 1 ; then
        echo "Can not create path ${_DESTINATION}"
        return 1
    fi
    if ! preparePath "${sourceMount}" 1 ; then
        echo "Can not create path ${sourceMount}"
        return 1
    fi

    hnSrcPath=${sourceMount}
    hnDstPath=${_DESTINATION}

    if [[ "$_CTID" -gt 0 ]] ; then
        hnDstPath="${VZ_CTID_ROOT}${hnDstPath}"
        hnSrcPath="${VZ_CTID_ROOT}${hnSrcPath}"
    fi

    if [[ "$_MOVEDATA" -gt 0 ]] ; then
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : moving data from $hnDstPath to $hnSrcPath" >> ${JEM_CALLS_LOG}
        $RSYNC -aP --force "${hnDstPath}/" "${hnSrcPath}/" >> $ACTIONS_LOG 2>&1
        rm -fr "${hnDstPath}/*" >> $ACTIONS_LOG 2>&1
    fi

    echo -e $mntEntry >> "${VZ_CTID_ROOT}${CONTAINER_MOUNTS_STORAGE}"
    echo $mntEntry
    if [[ $running -eq 0 ]] ; then
        vzexecRun "mount \"$($SED -re 's/("\*|\$|\?|\|\^|`|'\'')/\\\1/g' <<< "${_DESTINATION}")\""
    else
        $VZCTL umount $CTID > /dev/null 2>&1
    fi
    res=$?
    if [[ $res -gt 0 ]]; then
        echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : error mounting share $(gatherCTInfo)" >> ${JEM_CALLS_LOG}
        return 1;
    fi
    return 0;
}

function doRemount() {
    local issue_file="$(vzctPath $VZ_CTID_ROOT /etc/issue )"
    local release_files="$(vzctPath $VZ_CTID_ROOT /etc/)/*-release"
    issue_string=$(set +f; cat $release_files $issue_file 2>/dev/null);
    OS=$(detectOS "$issue_string")
    OS_ver=$(getOSVersion "$issue_string")
    OS_ver=${OS_ver%%.*}

    if [[ "x$OS" == "xalpine" ]] ; then
        log "OS is ALPINE"
        local shares=(${_DESTINATION})
        [[ -z ${_DESTINATION} ]] && {
            [[ ! -z "${CTID}" ]] && MOUNTS_STORAGE="$(vzctPath $VZ_CTID_ROOT /etc/fstab)"
            shares=($($SED -nre "/\snfs(3|4)?\s/{s/\s*(\S+)\s*(\S+).*/\2/;p}" "$MOUNTS_STORAGE" ))
        }
        for share in ${shares[*]} ; do
            remountPath "$share"
        done
        return 0
    fi
    
    isContainerRunning ${CTID} ; running=$?
    
    if [[ $running -eq 0 ]] ; then
        if _hasActiveMounts ; then
            vzexecRun "$_ENABLEAUTOFSCMD"
            _reloadAutoFS
        else
            vzexecRun "$_DISABLEAUTOFSCMD"
        fi
    fi
    
    return 0;
}

function dosetupUtils() {
    if ! isContainerRunning $CTID ; then
        writeJSONResponseErr "result=>4110" "message=>Can not execute command. Container is not running"
        return 1
    fi

    local issue_file="$(vzctPath $VZ_CTID_ROOT /etc/issue )"
    local release_files="$(vzctPath $VZ_CTID_ROOT /etc/)/*-release"

    issue_string=$(set +f; cat $release_files $issue_file 2>/dev/null);
    OS=$(detectOS "$issue_string")
    OS_ver=$(getOSVersion "$issue_string")
    OS_ver=${OS_ver%%.*}

    #JE-25896
    if [[ "x$OS" == "xalpine" ]] ; then
        installCmd=$(installPackageCmd $OS install nfs-utils)
        vzexecRun "$installCmd"

        checkCmd=$(checkPackageCmd $OS nfs-utils)
        vzexecRun "eval $checkCmd"
        stdout=$(vzexecGetLastStdOut)
        if [[ -n "$stdout" ]] ; then
            writeJSONResponseErr "result=>4140" "message=>Failed to install following packages: $stdout"
            return 1
        fi

        vzexecRun "rc-update add netmount default"
        return 0
    fi

    if [ "x$OS" == "xubuntu" -o "x$OS" == "xdebian" ] ; then
        vzexecRun "apt update; curl -sLO http://repository.jelastic.com/pub/autofs_5.1.5-1_amd64.deb"
        if [ "x$OS" == "xdebian" -a "$OS_ver" -eq "8" ]; then
            vzexecRun "$(installPackageCmd $OS install autofs)"
            vzexecRun "DEBIAN_FRONTEND=noninteractive dpkg -i ./autofs_5.1.5-1_amd64.deb"
        else
            vzexecRun "$(installPackageCmd $OS install ./autofs_5.1.5-1_amd64.deb)"
        fi
        vzexecRun "rm -f autofs_5.1.5-1_amd64.deb"
        installCmd="$(installPackageCmd $OS install nfs-common)"
        checkCmd=$(checkPackageCmd $OS autofs nfs-common)
    elif [ "x$OS" == "xcentos" ] ; then
        if [ "$OS_ver" -eq "7" ]; then
           installCmd=$(installPackageCmd $OS install http://repository.jelastic.com/pub/autofs-5.1.5-1j.el7.x86_64.rpm nfs-utils)
        fi
        if [ "$OS_ver" -eq "6" ]; then
           installCmd=$(installPackageCmd $OS install http://repository.jelastic.com/pub/autofs-5.1.5-1j.el6.x86_64.rpm nfs-utils)
        fi
        checkCmd=$(checkPackageCmd $OS autofs nfs-utils)
    elif [ "x$OS" == "xfedora" ] ; then
        installCmd=$(installPackageCmd $OS install http://repository.jelastic.com/pub/autofs-5.1.5-1j.fc23.x86_64.rpm nfs-utils)
        checkCmd=$(checkPackageCmd $OS autofs nfs-utils)
    else
        installCmd=$(installPackageCmd $OS install autofs nfs-utils)
        checkCmd=$(checkPackageCmd $OS autofs nfs-utils)
    fi
    vzexecRun "$installCmd"

    vzexecRun "eval $checkCmd"
    stdout=$(vzexecGetLastStdOut)
    if [[ -n "$stdout" ]] ; then
        writeJSONResponseErr "result=>4140" "message=>Failed to install following packages: $stdout"
        return 1
    fi

    if [ -e "$(vzctPath $VZ_CTID_ROOT /etc/rc.d/init.d/autofs)" ]; then  
        $GREP killproc -A2 "$(vzctPath $VZ_CTID_ROOT /etc/rc.d/init.d/autofs)" | $GREP -q 'sleep 1' || $SED -i '/killproc/{N;s/$/\n\t\tsleep 1;/}' "$(vzctPath $VZ_CTID_ROOT /etc/rc.d/init.d/autofs)"
    fi

    [ -e "$(vzctPath $VZ_CTID_ROOT /etc/autofs.conf)" ] && $SED -ci -e "s/^timeout = .*/timeout = ${JELASTIC_AUTOFS_TIMEOUT}/g" "$(vzctPath $VZ_CTID_ROOT /etc/autofs.conf)"

    if [ "x$OS" == "xdebian" -a "$OS_ver" -eq "7" ] ; then
        [ -e "$(vzctPath $VZ_CTID_ROOT /etc/init.d/autofs)" ] && $SED -i -re 's/PROG=automount/PROG=automount\n_SYSTEMCTL_SKIP_REDIRECT="true"/' "$(vzctPath $VZ_CTID_ROOT /etc/init.d/autofs)"
    fi

    if [ "x$OS" == "xcentos" -a "$OS_ver" -eq "7" ] ; then
        $SED -i -re '/automount/d' "$(vzctPath $VZ_CTID_ROOT /etc/nsswitch.conf)"
        echo -e "\nautomount:  files" >> "$(vzctPath $VZ_CTID_ROOT /etc/nsswitch.conf)"
    fi
    echo '/- /etc/autofs.jelastic' >> "$(vzctPath $VZ_CTID_ROOT /etc/auto.master)"
    vzexecRun "$_DISABLEAUTOFSCMD"
    return 0
}

function gatherCTInfo() {
    isContainerRunning $CTID || {
        echo "Container $CTID is not running"
    }

    _ctAutoFSFile="$(vzexecRun " [ -e \"/etc/autofs.conf\" ] && cat $MOUNTS_STORAGE || echo \"/etc/autofs.conf not found\""; vzexecGetLastStdOut)"
    _ctFstab="$(vzexecRun " [ -e \"/etc/fstab\" ] && cat /etc/fstab || echo \"/etc/fstab not found\""; vzexecGetLastStdOut)"
    _ctIptablesRules="$(vzexecRun "iptables -S"; vzexecGetLastStdOut)"
    _ctIpInfo="$(vzexecRun "ip a l; ip r l; cat /etc/resolvconf" ; vzexecGetLastStdOut)"

    echo -e "\n`date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID \n=====\nContainer $CTID Info:\nautofs:\n$_ctAutoFSFile\nfstab:\n$_ctFstab\nip info:\n$_ctIpInfo\niptables:\n$_ctIptablesRules\n=====\n"
}

function doMount() {
    [[ -z ${_SOURCE} && -z ${_DESTINATION} ]] && {
        out=$($EXEC "mount -a" 2>&1)
        if [[ ! -z "${out}" ]] ; then
            log "$out"
        fi
        return 0;
    }
    [[ -z ${_SOURCE} ]] && {
        writeJSONResponseErr "result=>4065" "message=>SOURCE required" ;
        return 1;
    }
    [[ -z ${_DESTINATION} ]] && {
        writeJSONResponseErr "result=>4066" "message=>DESTINATION required" ;
        return 1;
    }

    local mtype sourceIP sourceMount
    isContainerRunning ${CTID} ; running=$?
    if [[ $running -ne 0 ]] ; then
        echo "`date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID - container is not running." >> ${JEM_CALLS_LOG}
        $VZCTL mount $CTID > /dev/null 2>&1
        [ -e "$(vzctPath $VZ_CTID_ROOT /etc/autofs.conf)" ] && $SED -ci -e "s/^timeout = ${DEFAULT_AUTOFS_TIMEOUT}/timeout = ${JELASTIC_AUTOFS_TIMEOUT}/g" "$(vzctPath $VZ_CTID_ROOT /etc/autofs.conf)"
    else
        vzexecRun " [ -e \"/etc/autofs.conf\" ] && sed -ci -e \"s/^timeout = ${DEFAULT_AUTOFS_TIMEOUT}/timeout = ${JELASTIC_AUTOFS_TIMEOUT}/g\" \"/etc/autofs.conf\""
        if ! vzexecRun " [ -f \"$CONTAINER_MOUNTS_STORAGE\" ] || { touch \"$CONTAINER_MOUNTS_STORAGE\" 2>/dev/null; false; }" ; then
            dosetupUtils $_CTID
        fi
    fi

    # parse connection string
    _SOURCE="$($SED -re 's/(\[|\]|\*|\(|\)|\$|\?|\|)/\\\1/g' <<< "$_SOURCE")"
    eval "$(echo "${_SOURCE}" | $SED -rne "s/(([Rr][Oo]|[Rr][Ww]):?([Ll][Oo][Cc][Aa][Ll]|[Nn][Ff][Ss]3?4?|[Ww][Ee][Bb][Dd][Aa][Vv]):?(\/){0,2})?([^:]+):?(.*)/atype=\2\nmtype='\3'\nsourceIP='\5'\nsourceMount='\6';/g;p" | $SED -re "s/='(.*?)'.*/=\1/g" | $SED -re "s/('|\"|\`)/\\\\\1/g" | $SED -re 's/(.*)=(.*)/\1="\2"/g')"
    mtype=${mtype,,}
    atype=${atype,,}
    atype=$($SED -re 's/;//g' <<< $atype)
    echo "`date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID - protocol=${mtype} source=${sourceIP} sourceMount=${sourceMount}" >> ${JEM_CALLS_LOG}
    [[ -z "${mtype}" ]] && mtype="nfs"

    # for local mounts (bind)
    if [ "${mtype}" == "local" -a "x${sourceMount}" == "x" ] ; then
        sourceMount="/${sourceIP}"
    fi
    [[ -z "${sourceMount}" ]] && mountpoint="/volumes"
    [[ -z "${sourceIP}" ]] && {
        writeJSONResponseErr "result=>4067" "message=>invalid source string format." ;
        return 1;
    }
    _DEFAULT_NFS_MOUNT_OPTS="${_DEFAULT_NFS_MOUNT_OPTS},${atype}"
    msg=$(process${mtype} "${sourceIP}" "${sourceMount}"); res=$?
    result="$res"
    [[ "$res" -gt 0 ]] && result="4111"
    [[ "$res" -eq 2 ]] && return 1
    writeJSONResponseOut "result=>$result" "message=>${msg}" ;
    return 0
}

function doUmount() {
    [[ -z ${_DESTINATION} && -z ${UNKNOWN_ARG} ]] && {
        writeJSONResponseErr "result=>4066" "message=>DESTINATION required" ;
        return 1;
    }
    local rescode retfunc msg="successfully unmounted";
    local running
    local -a shares

    isContainerRunning ${CTID} ; running=$?
    [[ $running -ne 0 ]] && $VZCTL mount $CTID > /dev/null 2>&1

    local issue_file="$(vzctPath $VZ_CTID_ROOT /etc/issue )"
    local release_files="$(vzctPath $VZ_CTID_ROOT /etc/)/*-release"
    issue_string=$(set +f; cat $release_files $issue_file 2>/dev/null);
    OS=$(detectOS "$issue_string")
    OS_ver=$(getOSVersion "$issue_string")
    OS_ver=${OS_ver%%.*}

    for i in $(seq 0 $((${#UNKNOWN_ARG[@]}-1))); do
        if [ ! -z "${UNKNOWN_ARG[$i]}" ] ; then
            [ ${#shares[*]} -gt 0 ] && shares=("${shares[@]}" "${UNKNOWN_ARG[$i]}") || shares=("${UNKNOWN_ARG[$i]}")
        fi
    done

    if [[ ! -z ${_DESTINATION} ]] ; then
        shares+=("${_DESTINATION}")
    fi

    if [[ "x$OS" == "xalpine" ]] ; then
        log "OS is ALPINE"
        [[ ! -z "${CTID}" ]] && MOUNTS_STORAGE="$(vzctPath $VZ_CTID_ROOT /etc/fstab)"
    fi

    OIFS=$IFS; IFS=$'\n'
    for i in $(seq 0 $((${#shares[*]}-1)) ) ; do
        IFS=$OIFS
        if [[ $running -eq 0 ]] ; then
            if ! vzexecRun "umount '${shares[$i]}';" ; then
                log "Performing lazy umount"
                if ! vzexecRun "umount -l '${shares[$i]}';" ; then
                    msg="$(vzexecGetLastStdErr)";
                else
                    msg="$(vzexecGetLastStdOut)";
                fi
            fi
            rescode=$(vzexecGetLastErrCode)
        else
            $VZCTL mount $CTID > /dev/null 2>&1
            rescode=0
        fi

        if [[ $FORCE_UMOUNT -eq 0 ]] ; then
             rescode=0
        fi

        if [[ "x$SAVE_CONFIG" == "xtrue" ]] ; then
            if [ $rescode -eq 0 ] ; then
                if [[ "x$OS" == "xalpine" ]] ; then
                    local dpath="\s+$($SED -re 's/\//\\\//g' <<< $($SED -re 's/\^/\\^/g' -e 's/\$/\\$/g' -e 's/(\+\{|\}|\[|\]|\(|\))/\\\1/g'  -e 's/\s/\\\\040/g' <<< "${shares[$i]}"))\s+(nfs|none)\s+";
                else
                    local dpath="^$($SED -re 's/\//\\\//g' <<< $($SED -re 's/\^/\\^/g' -e 's/\$/\\$/g' -e 's/(\+\{|\}|\[|\]|\(|\))/\\\1/g'  -e 's/\s/\\\\ /g' <<< "${shares[$i]}"))\s+-fstype=nfs.*";
                fi
                out=$($SED -i -re /"${dpath}"/d ${MOUNTS_STORAGE} 2>&1)
                [[ ! -z "${out}" ]] && log "${out}";
                retfunc="writeJSONResponseOut result=>0"
            else
                echo "echo `date +%D.%k:%M:%S.%N`:   $action:$subaction CTID:$CTID : error umounting share $(gatherCTInfo)" >> ${JEM_CALLS_LOG}
                retfunc="writeJSONResponseErr result=>99"
            fi
        else
            retfunc="writeJSONResponseOut result=>$rescode"
        fi
    done

    if [[ $running -ne 0 ]] ; then
        $VZCTL umount $CTID > /dev/null 2>&1
    else
        if _hasActiveMounts ; then
            vzexecRun "$_ENABLEAUTOFSCMD"
            _reloadAutoFS
        else
            vzexecRun "$_DISABLEAUTOFSCMD"
        fi
    fi
    
    $retfunc "message=>$msg";
    return 0;
}

function doList() {
    msg=$($EXEC "mount | $SED -nre '/nfs(3|4)?/{s/(.*)\s+type.*/\1/g;p}';")
    writeJSONResponseOut "result=>0" "message=>$msg"
    return 0
}


function doExport() {
    [[ -z ${_SOURCE} ]] && {
        writeJSONResponseErr "result=>4065" "message=>SOURCE required" ;
        return 1;
    }

    vzexecSetCTID $_CTID;
    if ! vzexecRun "jem auth add -t ip -l ${_IPLIST};" ; then
        writeJSONResponseErr "result=>4030" "message=>$(vzexecGetLastStdErr)";
        return $(vzexecGetLastErrCode);
    fi
    if ! vzexecRun "mkdir -p '${_SOURCE}'; chmod 0777 '${_SOURCE}';" ; then
        writeJSONResponseErr "result=>4030" "message=>$(vzexecGetLastStdErr)";
        return $(vzexecGetLastErrCode);
    fi
    if ! vzexecRun "exportfs -ra;" ; then
        writeJSONResponseErr "result=>4030" "message=>$(vzexecGetLastStdErr)";
        return $(vzexecGetLastErrCode);
    fi
    writeJSONResponseOut "result=>0" "message=>success";
    return 0;
}

function describeExport() {
    echo "Export";
}

function describeExportParameters() {
    echo "-o|--ctid <ctid> -s|--source <spath>";
}

function describeExportOptions() {
    echo "-s|--source: source path";
    echo "-o|--ctid: container ID";
}

function describeList() {
    echo "List mount points";
}

function describeListParameters() {
    echo "-o|--ctid <ctid>";
}

function describeListOptions() {
    echo "-o|--ctid: container ID";
}

function describeMount() {
    echo "Mount source to destination";
}

function describeMountParameters() {
    echo "-o|--ctid <ctid> -s|--source <spath> -d|--destination <dpath>";
}

function describeMountOptions() {
    echo "-o|--ctid: container ID";
    echo "-s|--source: source path";
    echo "-d|--destination: destination path";
}

function describeUmount() {
    echo "Umount destination";
}

function describeUmountParameters() {
    echo "-o|--ctid <ctid> -d|--destination  <dpath>";
}

function describeUmountOptions() {
    echo "-o|--ctid: container ID ";
    echo "-d|--destination: destination path";
}

defineBigInline _DISABLEAUTOFSCMD <<'EOF'
    if pgrep automount >/dev/null ; then 
        if [ -d /run/systemd/system ] ; then
            systemctl disable autofs; 
            systemctl stop autofs; 
        elif command -V initctl >/dev/null 2>&1 ; then 
            if command -V update-rc.d >/dev/null 2>&1 ; then 
                update-rc.d autofs disable ; 
            else 
                chkconfig autofs off; 
                service autofs stop ; 
            fi;
        fi;
    else
        if [ -d /run/systemd/system ] ; then
            systemctl disable autofs; 
        elif command -V initctl >/dev/null 2>&1 ; then 
            update-rc.d autofs disable ;
        else 
            chkconfig autofs off;
        fi
    fi
EOF

defineBigInline _ENABLEAUTOFSCMD <<'EOF'
    if [ -d /run/systemd/system ] ; then
        systemctl enable autofs; 
        if ! pgrep automount >/dev/null ; then 
            systemctl start autofs; 
        fi
    elif command -V initctl >/dev/null 2>&1 ; then 
        if command -V update-rc.d >/dev/null 2>&1 ; then 
            update-rc.d autofs enable ; 
        else
            chkconfig autofs on;
        fi
        if ! pgrep automount >/dev/null ; then 
            service autofs start ;
        fi
    else 
        chkconfig autofs on; 
        if ! pgrep automount >/dev/null ; then 
            service autofs start ; 
        fi
    fi;
EOF

